name: GHAS Triage

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  security-events: read

jobs:
  triage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        pip install -e .

    - name: Locate SARIF or create a valid sample
      id: sarif
      shell: bash
      run: |
        set -euo pipefail

        # Find the first SARIF file in the repo. Fallback to empty.
        SARIF_PATH="$(git ls-files '**/*.sarif' | head -n 1 || true)"

        # If no SARIF file was found, create a minimal, valid sample.
        if [ -z "${SARIF_PATH:-}" ]; then
          echo "No SARIF file found. Creating a sample."
          mkdir -p sarif
          SARIF_PATH="sarif/sample.sarif"
          # Use a heredoc for cleaner JSON definition.
          cat <<EOF > "${SARIF_PATH}"
        {
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "SampleScanner",
                  "rules": [ { "id": "SAMPLE001" } ]
                }
              },
              "results": [
                {
                  "ruleId": "SAMPLE001",
                  "message": { "text": "Potential SQL Injection in query builder." },
                  "locations": [
                    {
                      "physicalLocation": {
                        "artifactLocation": { "uri": "src/db.py" },
                        "region": { "startLine": 42 }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
        EOF
                  fi

                  # CORRECTION: Validate the JSON of the *actual* SARIF file being used.
                  echo "Validating SARIF file: ${SARIF_PATH}"
                  python -c "import json; f = open('${SARIF_PATH}'); json.load(f); print('SARIF JSON is valid.')"

                  # Set the step output
                  echo "path=${SARIF_PATH}" >> "$GITHUB_OUTPUT"

    - name: Generate triage report
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        set -euo pipefail
        python -m triage.cli "${{ steps.sarif.outputs.path }}" --out-json triage.json --out-md triage.md

    - name: Upload triage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ghas-triage
        path: |
          triage.json
          triage.md

    - name: Post or update triage summary comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        python -m triage.sticky_comment triage.md
